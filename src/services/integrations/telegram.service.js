import TelegramBot from "node-telegram-bot-api";

// todo: –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ–±—â—É—é –ª–∏–±—É
const dictionary = {
  type: {
    rent: "–°–¥–∞—á–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –∞—Ä–µ–Ω–¥—É",
    sell: "–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
  },
  category: {
    apartment: "–ö–≤–∞—Ä—Ç–∏—Ä–∞",
    house: "–î–æ–º",
    land: "–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫",
    cottage: "–î–∞—á–∞",
    business: "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
    factory: "–ó–∞–≤–æ–¥—ã –∏ —Ñ–∞–±—Ä–∏–∫–∏",
    townhouse: "–¢–∞—É–Ω—Ö–∞—É—Å",
    other: "–î—Ä—É–≥–æ–µ",
  },
};

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —á–∞—Ç
 */
export const TelegramService = {
  getBot() {
    const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    const bot = new TelegramBot(TOKEN, { polling: false });

    return { bot, CHAT_ID, TOKEN };
  },
  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} text - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param {object} options - –û–ø—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {number} message_thread_id - –ù–æ–º–µ—Ä —Ç–æ–ø–∏–∫–∞ –≤ —á–∞—Ç–µ
   */
  sendMessage: async (text, options, message_thread_id) => {
    const { bot, CHAT_ID, TOKEN } = TelegramService.getBot();

    if (!TOKEN || !CHAT_ID) return;
    try {
      await bot.sendMessage(CHAT_ID, text, {
        parse_mode: "HTML",
        message_thread_id,
        ...options,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", error.message);
    }
  },

  /**
   * –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
   * @param {object} order - —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞
   */
  sendSellOrderNotification: async (order) => {
    if (!order) return;

    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const requiredFields = ["_id", "category", "price", "createdAt"];
    const missingFields = requiredFields.filter((field) => !order[field]);

    if (missingFields.length > 0) {
      const errorText = `‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</b>\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: <code>${missingFields.join(", ")}</code>`;
      return await TelegramService.sendMessage(errorText);
    }

    const { _id, category, roomCount, houseSquare, price, createdAt, type } =
      order;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –≤ –∞–¥–º–∏–Ω–∫—É
    const orderLink = `https://eis.whitedog.kz/orders/sell/${_id}`;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–≤–æ–¥–∞
    const date = new Date(createdAt).toLocaleString("ru-RU", {
      dateStyle: "short",
      timeStyle: "short",
    });

    const formattedPrice = Number(price)
      .toLocaleString("ru-RU")
      .replace(/\u00A0/g, " ");

    // –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = `
<b>üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</b>

<b>üè† –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${dictionary.category[category] || "–û—à–∏–±–∫–∞"}
<b>üìù –£—Å–ª—É–≥–∞:</b> ${dictionary.type[type] || "–û—à–∏–±–∫–∞"}
${roomCount ? `<b>üõè –ö–æ–º–Ω–∞—Ç:</b> ${roomCount}` : ""}
${houseSquare ? `<b>üìê –ü–ª–æ—â–∞–¥—å:</b> ${houseSquare} –º¬≤` : ""}
<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${formattedPrice} ‚Ç∏
<b>üïì –î–∞—Ç–∞:</b> ${date}

<span class="tg-spoiler"><b>üÜî ID –∑–∞—è–≤–∫–∏:</b> ${_id}</span>
`;

    // –ö–Ω–æ–ø–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É
    const inlineKeyboard = {
      reply_markup: {
        inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", url: orderLink }]],
      },
    };

    await TelegramService.sendMessage(message, inlineKeyboard, 2);
  },
  sendBuyOrderNotification: async (order) => {
    if (!order) return;

    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const requiredFields = ["estateId", "title"];
    const missingFields = requiredFields.filter((field) => !order[field]);

    if (missingFields.length > 0) {
      const errorText = `‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</b>\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: <code>${missingFields.join(", ")}</code>`;
      return await TelegramService.sendMessage(errorText);
    }

    const { _id, title, createdAt, estateId } = order;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –≤ –∞–¥–º–∏–Ω–∫—É
    const orderLink = `https://eis.whitedog.kz/admin/orders/feedback?estateId=${estateId}`;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–≤–æ–¥–∞
    const date = new Date(createdAt).toLocaleString("ru-RU", {
      dateStyle: "short",
      timeStyle: "short",
    });

    // –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = `
<b>üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</b>

<b>üè† –û–±—ä–µ–∫—Ç:</b> ${title}
<b>üïì –î–∞—Ç–∞:</b> ${date}

<span class="tg-spoiler"><b>üÜî ID –∑–∞—è–≤–∫–∏:</b> ${_id}</span>
<span class="tg-spoiler"><b>üÜî ID –æ–±—ä–µ–∫—Ç–∞:</b> ${estateId}</span>
`;

    // –ö–Ω–æ–ø–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É
    const inlineKeyboard = {
      reply_markup: {
        inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", url: orderLink }]],
      },
    };

    await TelegramService.sendMessage(message, inlineKeyboard, 6);
  },
};
